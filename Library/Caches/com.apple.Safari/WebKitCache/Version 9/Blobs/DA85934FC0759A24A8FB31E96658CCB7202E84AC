/*
 * HTML5 Radio Player With Playlist - Shoutcast and Icecast - v1.5.2
 *
 * Copyright 2014, LambertGroup
 *
 */

(function(d) {
    function F(a, c, l, e) {
        d(a.thumbsHolder_Thumbs[a.current_img_no]).css({
            background: c.playlistRecordBgOnColor,
            "border-bottom-color": c.playlistRecordBottomBorderOnColor,
            color: c.playlistRecordTextOnColor
        });
        a.is_very_first || A(-1, a, c, l);
        var n;
        "" != a.playlist_arr[a.origID].radiostream && (n = a.playlist_arr[a.origID].radiostream);
        return n
    }

    function J(a, c, l, e, n, f, g, r, h, q) {
        clearInterval(a.radioReaderAjaxInterval);
        d.get(c.pathToAjaxFiles + "now_playing.php", {
            the_stream: a.playlist_arr[a.origID].radiostream
        }, function(d) {
            a.playlist_arr[a.origID].title = d;
            D(a, c, l, e, n, f, g, r, h, q)
        });
        D(a, c, l, e, n, f, g, r, h, q);
        a.isFlashNeeded ? "" != a.myFlashObject && a.myFlashObject.myAS3function(F(a, c, l, e), c.initialVolume) : (document.getElementById(a.audioID).src = F(a, c, l, e), document.getElementById(a.audioID).load(), c.autoPlay && n.click());
        setTimeout(function() {
            a.radioReaderAjaxInterval = setInterval(function() {
                d.get(c.pathToAjaxFiles + "now_playing.php", {
                    the_stream: a.playlist_arr[a.origID].radiostream
                }, function(d) {
                    a.playlist_arr[a.origID].title = d;
                    D(a, c, l, e, n, f, g, r, h, q)
                })
            }, 1E3 * c.nowPlayingInterval)
        }, 1E3 * c.nowPlayingInterval)
    }

    function D(a, c, d, e, n, f, g, r, h, q) {
        f.width(a.titleWidth);
        r.width(a.titleWidth);
        a.curSongText = "";
        c.showTitle && null != a.playlist_arr[a.origID].title && "" != a.playlist_arr[a.origID].title && (a.curSongText += "<b>" + c.translateSongTitle + "</b>" + a.playlist_arr[a.origID].title);
        c.showRadioStation && null != a.playlist_arr[a.origID].station && "" != a.playlist_arr[a.origID].station && r.html("<b>" + c.translateRadioStation + "</b>" + a.playlist_arr[a.origID].station);
        d = a.playlist_arr[a.origID].title.split("-");
        var p = c.noImageAvailable;
        c.grabLastFmPhoto ? a.lastfm.artist.getInfo({
            artist: d[0]
        }, {
            success: function(a) {
                "" != a.artist.image[3]["#text"].trim() && (p = a.artist.image[3]["#text"]);
                q.css({
                    background: "url(" + p + ") #000000",
                    "background-repeat": "no-repeat",
                    "background-position": "center center",
                    "background-size": "cover",
                    "border-width": c.imageBorderWidth + "px",
                    "border-color": c.imageBorderColor
                })
            },
            error: function(a, e) {
                q.css({
                    background: "url(" + p + ") #000000",
                    "background-repeat": "no-repeat",
                    "background-position": "center center",
                    "background-size": "cover",
                    "border-width": c.imageBorderWidth + "px",
                    "border-color": c.imageBorderColor
                })
            }
        }) : q.css({
            background: "url(" + p + ") #000000",
            "background-repeat": "no-repeat",
            "background-position": "center center",
            "background-size": "cover",
            "border-width": c.imageBorderWidth + "px",
            "border-color": c.imageBorderColor
        });
        a.curSongText && a.prevSongTitle != a.playlist_arr[a.origID].title && (g.css({
            width: "auto"
        }), a.isStationTitleInsideScrolling = !1, a.stationTitleInsideWait = 0, g.stop(), g.css({
            "margin-left": 0
        }), g.html(a.curSongText), clearInterval(a.timeupdateInterval), g.width() > a.titleWidth ? a.timeupdateInterval = setInterval(function() {
            !a.isStationTitleInsideScrolling && 5 <= a.stationTitleInsideWait && g.width() > a.titleWidth ? (a.isStationTitleInsideScrolling = !0, a.stationTitleInsideWait = 0, g.html(a.curSongText + " **** " + a.curSongText + " **** " + a.curSongText + " **** " + a.curSongText + " **** " + a.curSongText + " **** "), g.css({
                "margin-left": 0
            }), g.stop().animate({
                "margin-left": c.playerWidth - g.width() + "px"
            }, parseInt(1E4 * (g.width() - c.playerWidth) / 150, 10), "linear", function() {
                a.isStationTitleInsideScrolling = !1
            })) : !a.isStationTitleInsideScrolling && g.width() > a.titleWidth && a.stationTitleInsideWait++
        }, 300) : g.css({
            width: "100%"
        }), a.prevSongTitle = a.playlist_arr[a.origID].title)
    }

    function A(a, c, d, e) {
        var n = (c.thumbsHolder_ThumbHeight + 1) * (c.selectedCateg_total_images - d.numberOfThumbsPerScreen),
            f = 0;
        e.stop(!0, !0); - 1 == a || c.isCarouselScrolling ? !c.isCarouselScrolling && c.selectedCateg_total_images > d.numberOfThumbsPerScreen && (c.isCarouselScrolling = !0, f = -1 * parseInt((c.thumbsHolder_ThumbHeight + 1) * c.current_img_no, 10), Math.abs(f) > n && (f = -1 * n), c.selectedCateg_total_images > d.numberOfThumbsPerScreen && d.showPlaylist && c.audio4_html5_sliderVertical.slider("value", 100 + parseInt(100 * f / n)), e.animate({
            top: f + "px"
        }, 500, "easeOutCubic", function() {
            c.isCarouselScrolling = !1
        })) : (c.isCarouselScrolling = !0, f = 2 >= a ? -1 * n : parseInt(n * (a - 100) / 100, 10), 0 < f && (f = 0), e.animate({
            top: f + "px"
        }, 1100, "easeOutQuad", function() {
            c.isCarouselScrolling = !1
        }))
    }

    function Q(a, c, l, e, n, f, g, r, h, q, p, x, t, u, v, z) {
        e.stop(!0, !0);
        a.isCarouselScrolling = !1;
        e.stop().animate({
            left: -1 * f.width() + "px"
        }, 600, "easeOutQuad", function() {
            e.html("");
            for (var m = 0; m < a.category_arr.length; m++) a.thumbsHolder_Thumb = d('<div class="thumbsHolder_ThumbOFF" rel="' + m + '"><div class="padding">' + a.category_arr[m] + "</div></div>"), e.append(a.thumbsHolder_Thumb), a.thumbsHolder_Thumb.css({
                top: (a.thumbsHolder_Thumb.height() + 1) * m + "px",
                background: c.categoryRecordBgOffColor,
                "border-bottom-color": c.categoryRecordBottomBorderOffColor,
                color: c.categoryRecordTextOffColor
            }), a.category_arr[m] == a.selectedCateg && (a.current_img_no = m, a.thumbsHolder_Thumb.css({
                background: c.categoryRecordBgOnColor,
                "border-bottom-color": c.categoryRecordBottomBorderOnColor,
                color: c.categoryRecordTextOnColor
            }));
            a.selectedCateg_total_images = a.numberOfCategories;
            a.categsAreListed = !0;
            m = 0;
            c.showCategories && (m += c.selectedCategMarginBottom);
            c.showSearchArea && (m += c.selectedCategMarginBottom);
            n.height(2 * c.playlistPadding + (a.thumbsHolder_Thumb.height() + 1) * c.numberOfThumbsPerScreen + g.height() + h.height() + m);
            f.height((a.thumbsHolder_Thumb.height() + 1) * c.numberOfThumbsPerScreen);
            q.css({
                padding: c.playlistPadding + "px"
            });
            a.thumbsHolder_Thumbs = d(".thumbsHolder_ThumbOFF", l);
            a.numberOfCategories > c.numberOfThumbsPerScreen && c.showPlaylist ? (c.isPlaylistSliderInitialized && a.audio4_html5_sliderVertical.slider("destroy"), a.audio4_html5_sliderVertical.slider({
                orientation: "vertical",
                range: "min",
                min: 1,
                max: 100,
                step: 1,
                value: 100,
                slide: function(d, h) {
                    A(h.value, a, c, e)
                }
            }), c.isPlaylistSliderInitialized = !0, a.audio4_html5_sliderVertical.css({
                display: "inline",
                position: "absolute",
                height: n.height() - 20 - g.height() - m - h.height() - 2 * c.playlistPadding + "px",
                left: l.width() + 2 * c.playerPadding - a.audio4_html5_sliderVertical.width() - c.playlistPadding + "px",
                top: a.audioPlayerHeight + c.playlistTopPos + c.playlistPadding + g.height() + c.selectedCategMarginBottom + 2 + "px"
            }), c.showPlaylistOnInit || a.audio4_html5_sliderVertical.css({
                opacity: 0,
                display: "none"
            }), c.showPlaylistOnInit = !0, d(".thumbsHolder_ThumbOFF", l).css({
                width: l.width() + 2 * c.playerPadding - a.audio4_html5_sliderVertical.width() - 2 * c.playlistPadding - 3 + "px"
            })) : (c.isPlaylistSliderInitialized && (a.audio4_html5_sliderVertical.slider("destroy"), c.isPlaylistSliderInitialized = !1), d(".thumbsHolder_ThumbOFF", l).css({
                width: l.width() + 2 * c.playerPadding - 2 * c.playlistPadding + "px"
            }));
            a.thumbsHolder_Thumbs.click(function() {
                var k = d(this).attr("rel");
                a.selectedCateg = a.category_arr[k];
                r.html(a.selectedCateg);
                L(a, c, l, e, n, f, g, h, q, p, x, t, u, v, z)
            });
            a.thumbsHolder_Thumbs.mouseover(function() {
                d(this).css({
                    background: c.categoryRecordBgOnColor,
                    "border-bottom-color": c.categoryRecordBottomBorderOnColor,
                    color: c.categoryRecordTextOnColor
                })
            });
            a.thumbsHolder_Thumbs.mouseout(function() {
                var e = d(this),
                    h = e.attr("rel");
                a.current_img_no != h && e.css({
                    background: c.categoryRecordBgOffColor,
                    "border-bottom-color": c.categoryRecordBottomBorderOffColor,
                    color: c.categoryRecordTextOffColor
                })
            });
            f.mousewheel(function(d, h, b, g) {
                d.preventDefault();
                d = a.audio4_html5_sliderVertical.slider("value");
                if (1 < parseInt(d) && -1 == parseInt(h) || 100 > parseInt(d) && 1 == parseInt(h)) d += h, a.audio4_html5_sliderVertical.slider("value", d), A(d, a, c, e)
            });
            e.css({
                top: "0px"
            });
            e.stop().animate({
                left: "0px"
            }, 400, "easeOutQuad", function() {})
        })
    }

    function L(a, c, l, e, n, f, g, r, h, q, p, x, t, u, v) {
        e.stop(!0, !0);
        a.isCarouselScrolling = !1;
        var z = "",
            m = !1,
            k = 500;
        a.is_very_first && (k = 1);
        "" != a.search_val && (k = 1);
        e.stop().animate({
            left: -1 * f.width() + "px"
        }, k, "easeOutQuad", function() {
            e.html("");
            for (var k = a.selectedCateg_total_images = 0; k < a.playlist_arr.length; k++) m = !1, "" != a.search_val ? (z = a.playlist_arr[k].station.toLowerCase(), -1 != z.indexOf(a.search_val) && (m = !0)) : -1 != a.playlist_arr[k].category.indexOf(a.selectedCateg + ";") && (m = !0), m && (a.selectedCateg_total_images++, a.thumbsHolder_Thumb = d('<div class="thumbsHolder_ThumbOFF" rel="' + (a.selectedCateg_total_images - 1) + '" data-origID="' + k + '"><div class="padding">' + (c.showPlaylistNumber ? a.selectedCateg_total_images + ". " : "") + a.playlist_arr[k].station + "</div></div>"), e.append(a.thumbsHolder_Thumb), 0 == a.thumbsHolder_ThumbHeight && (a.thumbsHolder_ThumbHeight = a.thumbsHolder_Thumb.height()), a.thumbsHolder_Thumb.css({
                top: (a.thumbsHolder_ThumbHeight + 1) * a.selectedCateg_total_images + "px",
                background: c.playlistRecordBgOffColor,
                "border-bottom-color": c.playlistRecordBottomBorderOffColor,
                color: c.playlistRecordTextOffColor
            }), a.current_img_no = 0, a.origID == d("div[rel='" + (a.selectedCateg_total_images - 1) + "']").attr("data-origID") && a.thumbsHolder_Thumb.css({
                background: c.playlistRecordBgOnColor,
                "border-bottom-color": c.playlistRecordBottomBorderOnColor,
                color: c.playlistRecordTextOnColor
            }));
            a.categsAreListed = !1;
            k = 0;
            c.showCategories && (k += c.selectedCategMarginBottom);
            c.showSearchArea && (k += c.selectedCategMarginBottom);
            n.height(2 * c.playlistPadding + (a.thumbsHolder_ThumbHeight + 1) * c.numberOfThumbsPerScreen + g.height() + r.height() + k);
            f.height((a.thumbsHolder_ThumbHeight + 1) * c.numberOfThumbsPerScreen);
            h.css({
                padding: c.playlistPadding + "px"
            });
            a.thumbsHolder_Thumbs = d(".thumbsHolder_ThumbOFF", l);
            if (a.selectedCateg_total_images > c.numberOfThumbsPerScreen && c.showPlaylist) {
                c.isPlaylistSliderInitialized && a.audio4_html5_sliderVertical.slider("destroy");
                a.audio4_html5_sliderVertical.slider({
                    orientation: "vertical",
                    range: "min",
                    min: 1,
                    max: 100,
                    step: 1,
                    value: 100,
                    slide: function(b, d) {
                        A(d.value, a, c, e)
                    }
                });
                c.isPlaylistSliderInitialized = !0;
                var b = 0;
                c.showCategories && (b += c.selectedCategMarginBottom);
                a.audio4_html5_sliderVertical.css({
                    display: "inline",
                    position: "absolute",
                    height: n.height() - 20 - g.height() - k - r.height() - 2 * c.playlistPadding + "px",
                    left: l.width() + 2 * c.playerPadding - a.audio4_html5_sliderVertical.width() - c.playlistPadding + "px",
                    top: a.audioPlayerHeight + c.playlistTopPos + c.playlistPadding + g.height() + b + 2 + "px"
                });
                c.showPlaylistOnInit || a.audio4_html5_sliderVertical.css({
                    opacity: 0,
                    display: "none"
                });
                c.showPlaylistOnInit = !0;
                d(".thumbsHolder_ThumbOFF", l).css({
                    width: l.width() + 2 * c.playerPadding - a.audio4_html5_sliderVertical.width() - 2 * c.playlistPadding - 3 + "px"
                })
            } else c.isPlaylistSliderInitialized && (a.audio4_html5_sliderVertical.slider("destroy"), c.isPlaylistSliderInitialized = !1), d(".thumbsHolder_ThumbOFF", l).css({
                width: l.width() + 2 * c.playerPadding - 2 * c.playlistPadding + "px"
            });
            a.thumbsHolder_Thumbs.click(function() {
                c.autoPlay = !0;
                var b = d(this).attr("rel");
                a.thumbsHolder_Thumbs.css({
                    background: c.playlistRecordBgOffColor,
                    "border-bottom-color": c.playlistRecordBottomBorderOffColor,
                    color: c.playlistRecordTextOffColor
                });
                a.current_img_no = b;
                a.origID = d("div[rel='" + a.current_img_no + "']").attr("data-origID");
                q.addClass("AudioPause");
                J(a, c, e, l, q, p, x, t, u, v);
                A(-1, a, c, e)
            });
            a.thumbsHolder_Thumbs.mouseover(function() {
                d(this).css({
                    background: c.playlistRecordBgOnColor,
                    "border-bottom-color": c.playlistRecordBottomBorderOnColor,
                    color: c.playlistRecordTextOnColor
                })
            });
            a.thumbsHolder_Thumbs.mouseout(function() {
                var b = d(this),
                    e = b.attr("rel");
                a.origID != d("div[rel='" + e + "']").attr("data-origID") && b.css({
                    background: c.playlistRecordBgOffColor,
                    "border-bottom-color": c.playlistRecordBottomBorderOffColor,
                    color: c.playlistRecordTextOffColor
                })
            });
            f.mousewheel(function(b, d, h, k) {
                b.preventDefault();
                b = a.audio4_html5_sliderVertical.slider("value");
                if (1 < parseInt(b) && -1 == parseInt(d) || 100 > parseInt(b) && 1 == parseInt(d)) b += d, a.audio4_html5_sliderVertical.slider("value", b), A(b, a, c, e)
            });
            e.css({
                top: "0px"
            });
            e.stop().animate({
                left: "0px"
            }, 400, "easeOutQuad", function() {})
        })
    }

    function O(a, c, l) {
        "next" == l ? a.current_img_no == a.selectedCateg_total_images - 1 ? a.current_img_no = 0 : a.current_img_no++ : 0 > a.current_img_no - 1 ? a.current_img_no = a.selectedCateg_total_images - 1 : a.current_img_no--;
        a.origID = d("div[rel='" + a.current_img_no + "']").attr("data-origID")
    }

    function M() {
        var a = -1;
        if ("Microsoft Internet Explorer" == navigator.appName) {
            var c = navigator.userAgent,
                d = /MSIE ([0-9]{1,}[.0-9]{0,})/;
            null != d.exec(c) && (a = parseFloat(RegExp.$1))
        } else "Netscape" == navigator.appName && (c = navigator.userAgent, d = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/, null != d.exec(c) && (a = parseFloat(RegExp.$1)));
        return parseInt(a, 10)
    }

    function R() {
        d("audio").each(function() {
            d(".AudioPlay").removeClass("AudioPause");
            d(this)[0].pause()
        })
    }

    function M() {
        var a = -1;
        if ("Microsoft Internet Explorer" == navigator.appName) {
            var c = navigator.userAgent,
                d = /MSIE ([0-9]{1,}[.0-9]{0,})/;
            null != d.exec(c) && (a = parseFloat(RegExp.$1))
        } else "Netscape" == navigator.appName && (c = navigator.userAgent, d = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/, null != d.exec(c) && (a = parseFloat(RegExp.$1)));
        return parseInt(a, 10)
    }

    function S(a) {
        var c = !1;
        document.getElementById(a.audioID).canPlayType && "no" != document.getElementById(a.audioID).canPlayType("audio/mpeg") && "" != document.getElementById(a.audioID).canPlayType("audio/mpeg") || (c = !0);
        return c
    }
    var C = navigator.userAgent.toLowerCase();
    d.fn.audio4_html5 = function(a) {
        a = d.extend({}, d.fn.audio4_html5.defaults, a);
        M();
        return this.each(function() {
            var c = d(this),
                l = d('<div id="hide-explicit"><div class="FrameBehindPlayerText"></div><div class="FrameBehindPlayer"></div><div class="AudioFacebook"></div><div class="AudioTwitter"></div><div class="AudioPrev"></div><div class="AudioNext"></div><div class="AudioShowHidePlaylist"></div><div class="songTitle"></div><div class="songTitleInside"></div><div class="radioStation"></div><div class="ximage"></div></div><div id="player-info"><div class="headline">The</div><div class="title"><span class="mobile-headline">The </span>Alex Jones <span class="alt">Radio Show</span></div><div class="player"><div class="AudioPlay play play-button"></div><div>Listen now<div class="radio-controls"><a class="VolumeButton" title="Mute/Unmute"></a><div class="VolumeSlider"></div></div></div><div class="tagline">There is a war for your mind</div></div>');
                e = c.parent(".audio4_html5");
            e.addClass(a.skin);
            e.append(l);
            var n = d(".FrameBehindPlayerText", e),
                f = d(".FrameBehindPlayer", e);
            d(".AudioControls", e);
            var g = d(".AudioFacebook", e),
                r = d(".AudioTwitter", e),
                h = d(".AudioPlay", e),
                q = d(".AudioPrev", e),
                p = d(".AudioNext", e),
                x = d(".AudioShowHidePlaylist", e),
                t = d(".VolumeButton", e),
                u = d(".VolumeSlider", e),
                v = d(".songTitle", e),
                z = d(".songTitleInside", e),
                m = d(".radioStation", e),
                k = d(".ximage", e),
                D = M();
            if (-1 != C.indexOf("ipad") || -1 != C.indexOf("iphone") || -1 != C.indexOf("ipod") || -1 != C.indexOf("webos") || -1 != navigator.userAgent.indexOf("Android")) a.autoHidePlayButton = !1, h.css("display", "block");
            e.css({
                background: "transparent",
                padding: a.playerPadding + "px"
            });
            f.css({
                background: a.frameBehindPlayerColor
            });
            n.css({
                background: a.beneathTitleBackgroundColor_VisiblePlaylist,
                opacity: a.beneathTitleBackgroundOpacity_VisiblePlaylist / 100,
                "border-bottom": a.beneathTitleBackgroundBorderWidth + "px solid " + a.beneathTitleBackgroundBorderColor
            });
            var b = {
                current_img_no: 0,
                origID: 0,
                is_very_first: !0,
                total_images: 0,
                selectedCateg_total_images: 0,
                numberOfCategories: 0,
                is_changeSrc: !1,
                timeupdateInterval: "",
                totalTime: "",
                playlist_arr: "",
                isCarouselScrolling: !1,
                isStationTitleInsideScrolling: !1,
                curSongText: "",
                prevSongTitle: "",
                stationTitleInsideWait: 0,
                audioPlayerWidth: 0,
                audioPlayerHeight: 0,
                category_arr: "",
                selectedCateg: "",
                categsAreListed: !1,
                thumbsHolder_Thumb: d('<div class="thumbsHolder_ThumbOFF" rel="0"><div class="padding">test</div></div>'),
                thumbsHolder_ThumbHeight: 0,
                thumbsHolder_Thumbs: "",
                search_val: "",
                constantDistance: 5,
                titleWidth: 0,
                radioStationTopPos: 0,
                radioStationLeftPos: 0,
                titleTopPos: 0,
                titleLeftPos: 0,
                frameBehindPlayerTopPos: 0,
                frameBehindPlayerLeftPos: 0,
                imageTopPos: 0,
                imageLeftPos: 0,
                playTopPos: 0,
                playLeftPos: 0,
                previousTopPos: 0,
                previousLeftPos: 0,
                nextTopPos: 0,
                nextLeftPos: 0,
                volumeTopPos: 0,
                volumeLeftPos: 0,
                volumesliderTopPos: 0,
                volumesliderLeftPos: 0,
                showhideplaylistTopPos: 0,
                showhideplaylistLeftPos: 0,
                smallButtonDistance: 0,
                facebookTopPos: 0,
                facebookLeftPos: 0,
                twitterTopPos: 0,
                twitterLeftPos: 0,
                numberOfButtonsRightSide: 3,
                origParentFloat: "",
                origParentPaddingTop: "",
                origParentPaddingRight: "",
                origParentPaddingBottom: "",
                origParentPaddingLeft: "",
                windowWidth: 0,
                audioID: "",
                audioObj: "",
                radioReaderAjaxInterval: "",
                totalRadioStationsNo: 0,
                ajaxReturnedRadioStationsNo: 0,
                lastfm: "",
                isFlashNeeded: !0,
                myFlashObject: "",
                rndNum: 0,
                prevVolumeVal: 1
            };
            b.audioID = c.attr("id");
            b.isFlashNeeded = S(b); - 1 != D && (b.isFlashNeeded = !0);
            a.showFacebookBut || --b.numberOfButtonsRightSide;
            a.showTwitterBut || --b.numberOfButtonsRightSide;
            a.showPlaylistBut || --b.numberOfButtonsRightSide;
            a.showPlaylistBut || x.css({
                display: "none",
                padding: 0,
                margin: 0
            });
            e.width(a.playerWidth);
            a.origWidth = a.playerWidth;
            f.css({
                top: parseInt((k.height() + 2 * a.imageBorderWidth - f.height()) / 2, 10) + "px",
                left: "0px"
            });
            b.frameBehindPlayerTopPos = parseInt(f.css("top").substring(0, f.css("top").length - 2), 10);
            b.frameBehindPlayerLeftPos = parseInt(f.css("left").substring(0, f.css("left").length - 2), 10);
            n.css({
                top: b.frameBehindPlayerTopPos + f.height() + "px",
                left: "0px"
            });
            k.css({
                top: "0px",
                left: parseInt((e.width() - (k.width() + 2 * a.imageBorderWidth)) / 2, 10) + "px"
            });
            b.imageTopPos = parseInt(k.css("top").substring(0, k.css("top").length - 2), 10);
            b.imageLeftPos = parseInt(k.css("left").substring(0, k.css("left").length - 2), 10);
            // a.autoHidePlayButton && (d("*").on("click", function() {
            //     h.css({
            //         display: "none"
            //     })
            // }), k.mouseover(function() {
            //     h.css({
            //         display: "block"
            //     })
            // }), k.mouseout(function() {
            //     h.css({
            //         display: "none"
            //     })
            // }), h.mouseover(function() {
            //     h.css({
            //         display: "block"
            //     })
            // }));
            k.click(function() {
                h.click();
                // h.css({
                //     display: "block"
                // })
            });
            // b.playTopPos = b.frameBehindPlayerTopPos + parseInt((f.height() - h.height()) / 2, 10);
            // b.playLeftPos = parseInt((f.width() - h.width()) / 2, 10);
            // h.css({
            //     top: b.playTopPos + "px",
            //     left: b.playLeftPos + "px"
            // });
            // a.autoHidePlayButton && setTimeout(function() {
            //     h.fadeOut(1500, function() {})
            // }, 2E3);
            a.showNextPrevBut || (q.css({
                display: "none",
                width: 0,
                padding: 0,
                margin: 0
            }), p.css({
                display: "none",
                width: 0,
                padding: 0,
                margin: 0
            }));
            //b.previousTopPos = b.playTopPos + parseInt((h.height() - q.height()) / 2, 10);
            b.previousLeftPos = b.imageLeftPos - q.width() - b.constantDistance;
            q.css({
                top: b.previousTopPos + "px",
                left: b.previousLeftPos + "px"
            });
            b.nextTopPos = b.previousTopPos;
            b.nextLeftPos = b.imageLeftPos + (k.width() + 2 * a.imageBorderWidth) + b.constantDistance;
            p.css({
                top: b.nextTopPos + "px",
                left: b.nextLeftPos + "px"
            });
            a.showVolume ? (b.volumeTopPos = b.nextTopPos + Math.floor((p.height() - t.height()) / 2), b.volumeLeftPos = parseInt((b.previousLeftPos - (t.width() + u.width() + b.constantDistance)) / 2, 10), t.css({
               
            }), b.volumesliderTopPos = b.volumeTopPos + Math.floor((t.height() - u.height()) / 2), b.volumesliderLeftPos = b.volumeLeftPos + t.width() + b.constantDistance, u.css({
                
            })) : (t.css({
            }), u.css({
            }));
            b.audioPlayerHeight = k.height() + 2 * a.imageBorderWidth + b.constantDistance + m.height() + b.constantDistance + v.height() + 2 * b.constantDistance;
            e.height(b.audioPlayerHeight);
            b.smallButtonDistance = parseInt((a.playerWidth - b.nextLeftPos - p.width() - b.numberOfButtonsRightSide * x.width()) / (b.numberOfButtonsRightSide + 1), 10);
            b.facebookTopPos = b.nextTopPos + Math.floor((p.height() - g.height()) / 2);
            b.facebookLeftPos = b.nextLeftPos + p.width() + b.smallButtonDistance;
            g.css({
                top: b.facebookTopPos + "px",
                left: b.facebookLeftPos + "px"
            });
            a.showFacebookBut ? (window.fbAsyncInit = function() {
                FB.init({
                    appId: a.facebookAppID,
                    version: "v2.0",
                    status: !0,
                    cookie: !0,
                    xfbml: !0
                })
            }, function(a, b, c) {
                var d = a.getElementsByTagName(b)[0];
                a.getElementById(c) || (a = a.createElement(b), a.id = c, a.src = "//connect.facebook.com/en_US/sdk.js", d.parentNode.insertBefore(a, d))
            }(document, "script", "facebook-jssdk")) : (g.css({
                display: "none",
                width: 0,
                padding: 0,
                margin: 0
            }), b.facebookLeftPos = b.nextLeftPos + p.width());
            g.click(function() {
                FB.ui({
                    method: "feed",
                    name: a.facebookShareTitle,
                    caption: b.playlist_arr[b.origID].station,
                    description: a.facebookShareDescription,
                    link: document.URL
                }, function(a) {})
            });
            b.twitterTopPos = b.nextTopPos + Math.floor((p.height() - g.height()) / 2);
            b.twitterLeftPos = b.facebookLeftPos + g.width() + b.smallButtonDistance;
            r.css({
                top: b.twitterTopPos + "px",
                left: b.twitterLeftPos + "px"
            });
            a.showTwitterBut || (r.css({
                display: "none",
                width: 0,
                padding: 0,
                margin: 0
            }), b.twitterLeftPos = b.facebookLeftPos + g.width());
            r.click(function() {
                window.open("https://twitter.com/intent/tweet?url=" + document.URL + "&text=" + b.playlist_arr[b.origID].station, "Twitter", "status = 1, left = 430, top = 270, height = 550, width = 420, resizable = 0")
            });
            b.showhideplaylistTopPos = b.nextTopPos + Math.floor((p.height() - x.height()) / 2);
            b.showhideplaylistLeftPos = b.twitterLeftPos + r.width() + b.smallButtonDistance;
            x.css({
                top: b.showhideplaylistTopPos + "px",
                left: b.showhideplaylistLeftPos + "px"
            });
            v.css({
                color: a.songTitleColor
            });
            m.css({
                color: a.radioStationColor
            });
            b.titleWidth = a.playerWidth - 2 * a.playlistPadding;
            b.radioStationTopPos = b.imageTopPos + (k.width() + 2 * a.imageBorderWidth) + 2 * b.constantDistance;
            b.radioStationLeftPos = a.playlistPadding;
            b.titleTopPos = b.imageTopPos + (k.width() + 2 * a.imageBorderWidth) + 2 * b.constantDistance + m.height() + b.constantDistance;
            b.titleLeftPos = a.playlistPadding;
            m.css({
                top: b.radioStationTopPos + "px",
                left: b.radioStationLeftPos + "px"
            });
            v.css({
                top: b.titleTopPos + "px",
                left: b.titleLeftPos + "px"
            });
            n.css({
                top: b.frameBehindPlayerTopPos + f.height() + "px",
                left: "0px",
                height: parseInt(e.height() / 2, 10) + f.height() + "px"
            });
            var y = d(".thumbsHolderWrapper", e),
                K = d(".playlistPadding", e),
                G = d(".thumbsHolderVisibleWrapper", e),
                w = d(".thumbsHolder", e);
            b.audio4_html5_sliderVertical = d(".slider-vertical", e);
            var B = d(".selectedCategDiv", e),
                H = d(".innerSelectedCategDiv", e),
                I = d(".searchDiv", e),
                E = d(".search_term", e);
            K.css({
                padding: a.playlistPadding + "px"
            });
            G.append('<div class="readingData">' + a.translateReadingData + "</div>");
            a.showPlaylist || y.css({
                opacity: 0
            });
            a.showPlaylistOnInit || (y.css({
                opacity: 0,
                "margin-top": "-20px"
            }), n.css({
                background: a.beneathTitleBackgroundColor_HiddenPlaylist,
                opacity: a.beneathTitleBackgroundOpacity_HiddenPlaylist / 100,
                "border-bottom": a.beneathTitleBackgroundBorderWidth + "px solid " + a.beneathTitleBackgroundBorderColor
            }));
            B.css({
                "background-color": a.selectedCategBg,
                "background-position": "10px 50%",
                "margin-bottom": a.selectedCategMarginBottom + "px"
            });
            H.css({
                color: a.selectedCategOffColor,
                "background-position": a.playerWidth - 2 * a.playlistPadding - 20 + "px 50%"
            });
            a.showCategories || B.css({
                display: "none",
                width: 0,
                height: 0,
                padding: 0,
                margin: 0
            });
            I.css({
                "background-color": a.searchAreaBg,
                "margin-top": a.selectedCategMarginBottom + "px"
            });
            E.val(a.searchInputText);
            E.css({
                width: parseInt(a.playerWidth - 2 * a.playlistPadding - 37, 10) + "px",
                "background-color": a.searchInputBg,
                "border-color": a.searchInputBorderColor,
                color: a.searchInputTextColor
            });
            a.showSearchArea || I.css({
                display: "none",
                width: 0,
                height: 0,
                padding: 0,
                margin: 0
            });
            y.css({
                width: e.width() + 2 * a.playerPadding + "px",
                top: b.audioPlayerHeight + a.playlistTopPos + "px",
                left: "0px",
                background: a.playlistBgColor
            });
            G.width(e.width());
            b.playlist_arr = [];
            b.category_arr = [];
            d(".xaudioplaylist", e).children().each(function() {
                currentElement = d(this);
                b.total_images++;
                b.playlist_arr[b.total_images - 1] = [];
                b.playlist_arr[b.total_images - 1].title = "";
                b.playlist_arr[b.total_images - 1].station = "";
                b.playlist_arr[b.total_images - 1].image = "";
                b.playlist_arr[b.total_images - 1].category = "";
                b.playlist_arr[b.total_images - 1].radiostream = "";
                null != currentElement.find(".xtitle").html() && (b.playlist_arr[b.total_images - 1].title = currentElement.find(".xtitle").html());
                null != currentElement.find(".xstation").html() && (b.playlist_arr[b.total_images - 1].station = currentElement.find(".xstation").html());
                null != currentElement.find(".ximage").html() && (b.playlist_arr[b.total_images - 1].image = currentElement.find(".ximage").html());
                null != currentElement.find(".xcategory").html() && (b.playlist_arr[b.total_images - 1].category = a.translateAllRadioStations + ";" + currentElement.find(".xcategory").html() + ";");
                null != currentElement.find(".xradiostream").html() && (b.playlist_arr[b.total_images - 1].radiostream = currentElement.find(".xradiostream").html(), b.totalRadioStationsNo++, d.get(a.pathToAjaxFiles + "streamandgenre.php", {
                    the_stream: b.playlist_arr[b.total_images - 1].radiostream,
                    cur_i: b.total_images - 1,
                    translateAllRadioStations: a.translateAllRadioStations
                }, function(g) {
                    b.ajaxReturnedRadioStationsNo++;
                    var f = g.split("#----#");
                    2 <= f.length && "" == b.playlist_arr[f[0]].station && (b.playlist_arr[f[0]].station = f[1]);
                    3 <= f.length && "" == b.playlist_arr[f[0]].category && (b.playlist_arr[f[0]].category = f[2] + ";");
                    "" == b.playlist_arr[f[0]].category && (b.playlist_arr[f[0]].category = a.translateAllRadioStations);
                    g = [];
                    g = b.playlist_arr[f[0]].category.split(";");
                    for (f = 0; f < g.length; f++) g[f] = g[f].trim(), -1 === b.category_arr.indexOf(g[f]) && "" != g[f] && b.category_arr.push(g[f]);
                    b.ajaxReturnedRadioStationsNo == b.totalRadioStationsNo && (b.numberOfCategories = b.category_arr.length, b.selectedCateg = a.firstCateg, b.category_arr.sort(), "" == a.firstCateg && -1 === b.category_arr.indexOf(a.firstCateg) && (b.selectedCateg = b.category_arr[0]), H.html(b.selectedCateg), d(".readingData").remove(), L(b, a, e, w, y, G, B, I, K, h, v, z, m, c, k))
                }))
            });
            a.grabLastFmPhoto && (l = new LastFMCache, b.lastfm = new LastFM({
                apiKey: a.lastFMApiKey,
                apiSecret: a.lastFMSecret,
                cache: l
            }));
            B.click(function() {
                b.search_val = "";
                E.val(a.searchInputText);
                Q(b, a, e, w, y, G, B, H, I, K, h, v, z, m, c, k)
            });
            B.mouseover(function() {
                H.css({
                    color: a.selectedCategOnColor
                })
            });
            B.mouseout(function() {
                H.css({
                    color: a.selectedCategOffColor
                })
            });
            u.slider({
                value: a.initialVolume,
                step: .05,
                orientation: "horizontal",
                range: "min",
                max: 1,
                animate: !0,
                slide: function(c, d) {
                    a.initialVolume = d.value;
                    b.isFlashNeeded ? b.myFlashObject.myAS3function(F(b, a, w, e), a.initialVolume) : document.getElementById(b.audioID).volume = d.value
                },
                stop: function(a, b) {}
            });
            document.getElementById(b.audioID).volume = a.initialVolume;
            u.css({
                background: a.volumeOffColor
            });
            d(".ui-slider-range", u).css({
                background: a.volumeOnColor
            });
            h.click(function() {
                var c;
                c = b.isFlashNeeded ? !h.hasClass("AudioPause") : document.getElementById(b.audioID).paused;
                R();
                0 == c ? (b.isFlashNeeded ? b.myFlashObject.myAS3function("_pause_radio_stream_", a.initialVolume) : document.getElementById(b.audioID).pause(), h.removeClass("AudioPause")) : (b.isFlashNeeded ? b.myFlashObject.myAS3function("_play_radio_stream_", a.initialVolume) : (document.getElementById(b.audioID).src = F(b, a, w, e), document.getElementById(b.audioID).load(), document.getElementById(b.audioID).play()), h.addClass("AudioPause"))
            });
            p.click(function() {
                !b.categsAreListed && b.is_very_first && (h.addClass("AudioPause"), a.autoPlay = !0, b.thumbsHolder_Thumbs.css({
                    background: a.playlistRecordBgOffColor,
                    "border-bottom-color": a.playlistRecordBottomBorderOffColor,
                    color: a.playlistRecordTextOffColor
                }), O(b, a, "next"), J(b, a, w, e, h, v, z, m, c, k), A(-1, b, a, w))
            });
            q.click(function() {
                !b.categsAreListed && b.is_very_first && (h.addClass("AudioPause"), a.autoPlay = !0, b.thumbsHolder_Thumbs.css({
                    background: a.playlistRecordBgOffColor,
                    "border-bottom-color": a.playlistRecordBottomBorderOffColor,
                    color: a.playlistRecordTextOffColor
                }), O(b, a, "previous"), J(b, a, w, e, h, v, z, m, c, k), A(-1, b, a, w))
            });
            x.click(function() {
                0 > y.css("margin-top").substring(0, y.css("margin-top").length - 2) ? (aux_opacity = 1, aux_display = "block", aux_margin_top = "0px", y.css({
                    display: aux_display
                }), b.selectedCateg_total_images > a.numberOfThumbsPerScreen && b.audio4_html5_sliderVertical.css({
                    opacity: 1,
                    display: "block"
                }), n.css({
                    background: a.beneathTitleBackgroundColor_VisiblePlaylist,
                    opacity: a.beneathTitleBackgroundOpacity_VisiblePlaylist / 100,
                    "border-bottom": a.beneathTitleBackgroundBorderWidth + "px solid " + a.beneathTitleBackgroundBorderColor
                })) : (aux_opacity = 0, aux_display = "none", aux_margin_top = "-20px", b.selectedCateg_total_images > a.numberOfThumbsPerScreen && b.audio4_html5_sliderVertical.css({
                    opacity: 0,
                    display: "none"
                }), n.css({
                    background: a.beneathTitleBackgroundColor_HiddenPlaylist,
                    opacity: a.beneathTitleBackgroundOpacity_HiddenPlaylist / 100,
                    "border-bottom": a.beneathTitleBackgroundBorderWidth + "px solid " + a.beneathTitleBackgroundBorderColor
                }));
                y.animate({
                    opacity: aux_opacity,
                    "margin-top": aux_margin_top
                }, 500, "easeOutQuad", function() {
                    y.css({
                        display: aux_display
                    })
                })
            });
            t.click(function() {
                document.getElementById(b.audioID).muted ? (document.getElementById(b.audioID).muted = !1, t.removeClass("VolumeButtonMuted"), b.isFlashNeeded && (a.initialVolume = b.prevVolumeVal, b.myFlashObject.myAS3function(F(b, a, w, e), a.initialVolume))) : (document.getElementById(b.audioID).muted = !0, t.addClass("VolumeButtonMuted"), b.isFlashNeeded && (b.prevVolumeVal = a.initialVolume, a.initialVolume = 0, b.myFlashObject.myAS3function(F(b, a, w, e), a.initialVolume)))
            });
            w.swipe({
                swipeStatus: function(c, d, e, f, g, h) {
                    "up" != e && "down" != e || 0 == f || (currentScrollVal = b.audio4_html5_sliderVertical.slider("value"), currentScrollVal = "up" == e ? currentScrollVal - 1.5 : currentScrollVal + 1.5, b.audio4_html5_sliderVertical.slider("value", currentScrollVal), A(currentScrollVal, b, a, w))
                },
                threshold: 100,
                maxTimeThreshold: 500,
                fingers: "all"
            });
            E.on("click", function() {
                d(this).val("")
            });
            E.on("input", function() {
                b.search_val = E.val().toLowerCase();
                L(b, a, e, w, y, G, B, I, K, h, v, z, m, c, k)
            });
            b.isFlashNeeded && (b.rndNum = parseInt(998999 * Math.random() + 1E3), e.append("<div id='swfHolder" + b.rndNum + "'></div>"), swfobject.addDomLoadEvent(function() {
                b.myFlashObject = swfobject.createSWF({
                    data: a.pathToAjaxFiles + "flash_player.swf",
                    width: "0",
                    height: "0"
                }, {
                    flashvars: "streamUrl=" + b.playlist_arr[b.origID].radiostream + "&autoPlay=" + a.autoPlay + "&initialVolume=" + a.initialVolume
                }, "swfHolder" + b.rndNum)
            }), a.autoPlay && h.addClass("AudioPause"));
            J(b, a, w, e, h, v, z, m, c, k); - 1 == C.indexOf("ipad") && -1 == C.indexOf("iphone") && -1 == C.indexOf("ipod") && -1 == C.indexOf("webos") || h.removeClass("AudioPause");
            var P = function() {
                b.prevSongTitle = "";
                "" == b.origParentFloat && (b.origParentFloat = e.parent().css("float"), b.origParentPaddingTop = e.parent().css("padding-top"), b.origParentPaddingRight = e.parent().css("padding-right"), b.origParentPaddingBottom = e.parent().css("padding-bottom"), b.origParentPaddingLeft = e.parent().css("padding-left"));
                a.playerWidth != a.origWidth || a.playerWidth > d(window).width() ? e.parent().css({
                    "float": "none",
                    "padding-top": 0,
                    "padding-right": 0,
                    "padding-bottom": 0,
                    "padding-left": 0
                }) : e.parent().css({
                    "float": b.origParentFloat,
                    "padding-top": b.origParentPaddingTop,
                    "padding-right": b.origParentPaddingRight,
                    "padding-bottom": b.origParentPaddingBottom,
                    "padding-left": b.origParentPaddingLeft
                });
                var c = e.parent().width(),
                    l = b.numberOfButtonsRightSide;
                e.width() != c && (a.playerWidth = a.origWidth > c ? c : a.origWidth, e.width() != a.playerWidth && (e.width(a.playerWidth), b.titleWidth = a.playerWidth - 2 * a.playlistPadding, v.width(b.titleWidth), m.width(b.titleWidth), k.css({
                    top: "0px",
                    left: parseInt((e.width() - (k.width() + 2 * a.imageBorderWidth)) / 2, 10) + "px"
                // }), b.imageLeftPos = parseInt(k.css("left").substring(0, k.css("left").length - 2), 10), b.playTopPos = b.frameBehindPlayerTopPos + parseInt((f.height() - h.height()) / 2, 10), b.playLeftPos = parseInt((f.width() - h.width()) / 2, 10), h.css({
                //     top: b.playTopPos + "px",
                //     left: b.playLeftPos + "px"
                }), b.previousTopPos = b.playTopPos + parseInt((h.height() - q.height()) / 2, 10), b.previousLeftPos = b.imageLeftPos - q.width() - b.constantDistance, q.css({
                    top: b.previousTopPos + "px",
                    left: b.previousLeftPos + "px"
                }), b.nextTopPos = b.previousTopPos, b.nextLeftPos = b.imageLeftPos + (k.width() + 2 * a.imageBorderWidth) + b.constantDistance, p.css({
                    top: b.nextTopPos + "px",
                    left: b.nextLeftPos + "px"
                }), b.volumeTopPos = b.nextTopPos + Math.floor((p.height() - t.height()) / 2), b.volumeLeftPos = parseInt((b.previousLeftPos - (t.width() + u.width() + b.constantDistance)) / 2, 10), t.css({
                    
                }), b.volumesliderTopPos = b.volumeTopPos + Math.floor((t.height() - u.height()) / 2), b.volumesliderLeftPos = b.volumeLeftPos + t.width() + b.constantDistance, u.css({
                   
                }), 355 > a.playerWidth ? a.showTwitterBut && --l : l = b.numberOfButtonsRightSide, b.smallButtonDistance = parseInt((a.playerWidth - b.nextLeftPos - p.width() - l * x.width()) / (l + 1), 10), b.facebookTopPos = b.nextTopPos + Math.floor((p.height() - g.height()) / 2), b.facebookLeftPos = b.nextLeftPos + p.width() + b.smallButtonDistance, g.css({
                    top: b.facebookTopPos + "px",
                    left: b.facebookLeftPos + "px"
                }), a.showFacebookBut || (g.css({
                    display: "none",
                    width: 0,
                    height: 0,
                    padding: 0,
                    margin: 0
                }), b.facebookLeftPos = b.nextLeftPos + p.width()), !a.showTwitterBut || 355 > a.playerWidth ? (r.css({
                    display: "none"
                }), b.twitterLeftPos = b.facebookLeftPos + g.width() - 6) : (r.css({
                    display: "block"
                }), b.twitterTopPos = b.nextTopPos + Math.floor((p.height() - g.height()) / 2), b.twitterLeftPos = b.facebookLeftPos + g.width() + b.smallButtonDistance, r.css({
                    top: b.twitterTopPos + "px",
                    left: b.twitterLeftPos + "px"
                })), b.showhideplaylistTopPos = b.nextTopPos + Math.floor((p.height() - x.height()) / 2), b.showhideplaylistLeftPos = b.twitterLeftPos + r.width() + b.smallButtonDistance, x.css({
                    top: b.showhideplaylistTopPos + "px",
                    left: b.showhideplaylistLeftPos + "px"
                }), y.width(e.width() + 2 * a.playerPadding), G.width(e.width()), B.width(a.playerWidth - 2 * a.playlistPadding), H.css({
                    "background-position": a.playerWidth - 2 * a.playlistPadding - 20 + "px 50%"
                }), b.selectedCateg_total_images > a.numberOfThumbsPerScreen && a.showPlaylist ? (b.audio4_html5_sliderVertical.css({
                    left: e.width() + 2 * a.playerPadding - b.audio4_html5_sliderVertical.width() - a.playlistPadding + "px"
                }), d(".thumbsHolder_ThumbOFF", e).css({
                    width: e.width() + 2 * a.playerPadding - b.audio4_html5_sliderVertical.width() - 2 * a.playlistPadding - 3 + "px"
                })) : d(".thumbsHolder_ThumbOFF", e).css({
                    width: e.width() + 2 * a.playerPadding - 2 * a.playlistPadding + "px"
                }), E.css({
                    width: parseInt(a.playerWidth - 2 * a.playlistPadding - 50, 10) + "px"
                })), a.playerWidth < d(window).width() && e.parent().css({
                    "float": b.origParentFloat,
                    "padding-top": b.origParentPaddingTop,
                    "padding-right": b.origParentPaddingRight,
                    "padding-bottom": b.origParentPaddingBottom,
                    "padding-left": b.origParentPaddingLeft
                }));
                445 > a.playerWidth ? (u.css({
                    
                }), t.css({
                    
                })) : (u.css({
                    display: "block"
                }), t.css({
                    display: "block"
                }))
            }, N = !1;
            d(window).resize(function() {
                doResizeNow = !0; - 1 != D && 9 == D && 0 == b.windowWidth && (doResizeNow = !1);
                b.windowWidth == d(window).width() ? (doResizeNow = !1, a.windowCurOrientation != window.orientation && -1 != navigator.userAgent.indexOf("Android") && (a.windowCurOrientation = window.orientation, doResizeNow = !0)) : b.windowWidth = d(window).width();
                a.responsive && doResizeNow && (!1 !== N && clearTimeout(N), N = setTimeout(function() {
                    P()
                }, 300))
            });
            a.responsive && P()
        })
    };
    d.fn.audio4_html5.defaults = {
        playerWidth: 500,
        skin: "whiteControllers",
        initialVolume: .5,
        autoPlay: !0,
        loop: !0,
        playerPadding: 0,
        playerBg: "#000000",
        volumeOffColor: "#454545",
        volumeOnColor: "#ffffff",
        timerColor: "#ffffff",
        songTitleColor: "#000000",
        radioStationColor: "#000000",
        frameBehindPlayerColor: "#000000",
        imageBorderWidth: 4,
        imageBorderColor: "#000000",
        showFacebookBut: !0,
        facebookAppID: "499867206825745",
        facebookShareTitle: "HTML5 Radio Player With Playlist - Shoutcast and Icecast",
        facebookShareDescription: "A top-notch responsive HTML5 Radio Player compatible with all major browsers and mobile devices.",
        showVolume: !0,
        showTwitterBut: !0,
        showRadioStation: !0,
        showTitle: !0,
        showPlaylistBut: !0,
        showPlaylist: !0,
        showPlaylistOnInit: !0,
        showNextPrevBut: !0,
        autoHidePlayButton: !0,
        beneathTitleBackgroundColor_VisiblePlaylist: "#c55151",
        beneathTitleBackgroundOpacity_VisiblePlaylist: 100,
        beneathTitleBackgroundColor_HiddenPlaylist: "#c55151",
        beneathTitleBackgroundOpacity_HiddenPlaylist: 100,
        beneathTitleBackgroundBorderColor: "#000000",
        beneathTitleBackgroundBorderWidth: 3,
        translateRadioStation: "Radio Station: ",
        translateSongTitle: "Now Playing: ",
        translateReadingData: "reading data...",
        translateAllRadioStations: "ALL RADIO STATIONS",
        playlistTopPos: 6,
        playlistBgColor: "#c55151",
        playlistRecordBgOffColor: "#000000",
        playlistRecordBgOnColor: "#00000",
        playlistRecordBottomBorderOffColor: "#333333",
        playlistRecordBottomBorderOnColor: "#4d4d4d",
        playlistRecordTextOffColor: "#777777",
        playlistRecordTextOnColor: "#00b4f9",
        categoryRecordBgOffColor: "#000000",
        categoryRecordBgOnColor: "#252525",
        categoryRecordBottomBorderOffColor: "#2f2f2f",
        categoryRecordBottomBorderOnColor: "#2f2f2f",
        categoryRecordTextOffColor: "#777777",
        categoryRecordTextOnColor: "#00b4f9",
        numberOfThumbsPerScreen: 7,
        playlistPadding: 18,
        showCategories: !0,
        firstCateg: "ALL RADIO STATIONS",
        selectedCategBg: "#000000",
        selectedCategOffColor: "#FFFFFF",
        selectedCategOnColor: "#00b4f9",
        selectedCategMarginBottom: 12,
        showSearchArea: !0,
        searchAreaBg: "#000000",
        searchInputText: " search...",
        searchInputBg: "#ffffff",
        searchInputBorderColor: "#333333",
        searchInputTextColor: "#333333",
        responsive: !1,
        showPlaylistNumber: !0,
        nowPlayingInterval: 15,
        grabLastFmPhoto: !0,
        pathToAjaxFiles: "",
        noImageAvailable: "noimageavailable.jpg",
        lastFMApiKey: "6d38069793ab51b1f7f010d8f4d77000",
        lastFMSecret: "5f1bb73c21038e2ed7125c9ed6205cb8",
        origWidth: 0,
        isSliderInitialized: !1,
        isProgressInitialized: !1,
        isPlaylistSliderInitialized: !1
    }
})(jQuery);
